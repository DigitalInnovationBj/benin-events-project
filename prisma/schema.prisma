// This is your Prisma schema file
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// =============================
// MODELS
// =============================
enum Role {
  USER
  ADMIN
}

enum EVENTSTATUS {
  PENDING
  APPROVED
  REJECTED
  CANCELLED
}

enum EVENT_TYPE {
  FREE
  FREE_WITH_REGISTRATION
  PAID
}

enum RECCURENCE_TYPE {
  NONE
  DAILY
  WEEKLY
  MONTHLY
  YEARLY
}

model User {
  id            String         @id
  name          String
  email         String
  role          Role           @default(USER)
  emailVerified Boolean        @default(false)
  image         String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @default(now()) @updatedAt
  sessions      Session[]
  accounts      Account[]
  tickets       Ticket[]
  favorites     Favorite[]
  notifications Notification[]
  feedbacks     Feedback[]

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  @@map("account")
}

model Verification {
  id         String   @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt

  @@map("verification")
}

model Event {
  id          String      @id @default(cuid())
  title       String
  slug        String      @unique
  description String
  location    String
  type        EVENT_TYPE
  status      EVENTSTATUS @default(PENDING)
  price       Float?
  maxTickets  Int?
  image       String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @default(now()) @updatedAt
  dates       EventDate[]
  tickets     Ticket[]
  favorites   Favorite[]
  feedbacks   Feedback[]
  recommendations Recommendation[]
  marketingCampaigns MarketingCampaign[]
}

model EventDate {
  id             String          @id @default(cuid())
  eventId        String
  event          Event           @relation(fields: [eventId], references: [id], onDelete: Cascade)
  startDateTime  DateTime
  endDateTime    DateTime?
  isAllDay       Boolean         @default(false)
  reccurenceType RECCURENCE_TYPE @default(NONE)
  reccurenceEnd  DateTime?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @default(now()) @updatedAt
  tickets        Ticket[]
}

model Ticket {
  id           String    @id @default(cuid())
  eventId      String
  event        Event     @relation(fields: [eventId], references: [id], onDelete: Cascade)
  eventDateId  String
  eventDate    EventDate @relation(fields: [eventDateId], references: [id], onDelete: Cascade)
  userId       String
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  qrcode       String    @unique
  code         String    @unique
  purchaseDate DateTime  @default(now())
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @default(now()) @updatedAt

  @@unique([eventId, userId])
}

model Favorite {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  eventId   String
  event     Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@unique([userId, eventId])
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  subject   String
  content   String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@map("notification")
}

model Feedback {
  id        String   @id @default(cuid())
  name      String
  eventId   String
  event     Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  userId    String?
  user      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  email     String
  rating    Int
  comment   String
  createdAt DateTime @default(now())
}

model Recommendation {
  id          String   @id @default(cuid())
  name        String
  email       String
  eventId     String
  score       Float
  event       Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  message     String?
  createdAt   DateTime @default(now())
}

model MarketingCampaign {
  id          String   @id @default(cuid())
  name        String
  description String
  eventId     String
  event       Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  startDate   DateTime
  endDate     DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt
}